diff --git a/YSFGateway/Log.cpp b/YSFGateway/Log.cpp
index fc37ebf..f3b9f5d 100644
--- a/YSFGateway/Log.cpp
+++ b/YSFGateway/Log.cpp
@@ -40,6 +40,7 @@ static FILE* m_fpLog = NULL;
 static unsigned int m_displayLevel = 2U;
 
 static struct tm m_tm;
+static bool m_utc = true;
 
 static char LEVELS[] = " DMIWEF";
 
@@ -51,7 +52,13 @@ static bool LogOpen()
 	time_t now;
 	::time(&now);
 
-	struct tm* tm = ::gmtime(&now);
+	struct tm* tm;
+	if(m_utc)
+	{
+		tm = ::gmtime(&now);
+	}else{
+		tm = ::localtime(&now);
+	}
 
 	if (tm->tm_mday == m_tm.tm_mday && tm->tm_mon == m_tm.tm_mon && tm->tm_year == m_tm.tm_year) {
 		if (m_fpLog != NULL)
@@ -75,11 +82,17 @@ static bool LogOpen()
 }
 
 bool LogInitialise(const std::string& filePath, const std::string& fileRoot, unsigned int fileLevel, unsigned int displayLevel)
+{
+	return LogInitialise(filePath,fileRoot,fileLevel,displayLevel,false);
+}
+
+bool LogInitialise(const std::string& filePath, const std::string& fileRoot, unsigned int fileLevel, unsigned int displayLevel, bool utc)
 {
 	m_filePath     = filePath;
 	m_fileRoot     = fileRoot;
 	m_fileLevel    = fileLevel;
 	m_displayLevel = displayLevel;
+	m_utc          = utc;
     return ::LogOpen();
 }
 
@@ -92,8 +105,12 @@ void LogFinalise()
 void Log(unsigned int level, const char* fmt, ...)
 {
     assert(fmt != NULL);
-
-	char buffer[300U];
+	// don't log if log level is disabled
+	if ((level < m_fileLevel || m_fileLevel == 0) && (level < m_displayLevel || m_displayLevel == 0))
+	{
+		return;
+	}
+	char buffer[512U];
 #if defined(_WIN32) || defined(_WIN64)
 	SYSTEMTIME st;
 	::GetSystemTime(&st);
@@ -103,15 +120,26 @@ void Log(unsigned int level, const char* fmt, ...)
 	struct timeval now;
 	::gettimeofday(&now, NULL);
 
-	struct tm* tm = ::gmtime(&now.tv_sec);
+	struct tm* tm;
+	if(m_utc)
+	{
+		tm = ::gmtime(&now.tv_sec);
+	}else{
+		tm = ::localtime(&now.tv_sec);
+	}
 
-	::sprintf(buffer, "%c: %04d-%02d-%02d %02d:%02d:%02d.%03lu ", LEVELS[level], tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec, now.tv_usec / 1000U);
+	unsigned int len;
+#ifdef __APPLE__
+	len = ::snprintf(buffer, 512, "%c: %04d-%02d-%02d %02d:%02d:%02d.%03u ", LEVELS[level], tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec, now.tv_usec / 1000U);
+#else
+	len = ::snprintf(buffer, 512, "%c: %04d-%02d-%02d %02d:%02d:%02d.%03lu ", LEVELS[level], tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec, now.tv_usec / 1000U);
+#endif
 #endif
 
 	va_list vl;
 	va_start(vl, fmt);
 
-	::vsprintf(buffer + ::strlen(buffer), fmt, vl);
+	::vsnprintf(buffer + len, 512 - len, fmt, vl);
 
 	va_end(vl);
 
diff --git a/YSFGateway/Log.h b/YSFGateway/Log.h
index d671ef9..a58f4ee 100644
--- a/YSFGateway/Log.h
+++ b/YSFGateway/Log.h
@@ -29,8 +29,8 @@
 #define	LogFatal(fmt, ...)	Log(6U, fmt, ##__VA_ARGS__)
 
 extern void Log(unsigned int level, const char* fmt, ...);
-
 extern bool LogInitialise(const std::string& filePath, const std::string& fileRoot, unsigned int fileLevel, unsigned int displayLevel);
+extern bool LogInitialise(const std::string& filePath, const std::string& fileRoot, unsigned int fileLevel, unsigned int displayLevel, bool utc);
 extern void LogFinalise();
 
 #endif
diff --git a/YSFReflector/Log.cpp b/YSFReflector/Log.cpp
index fc37ebf..f3b9f5d 100644
--- a/YSFReflector/Log.cpp
+++ b/YSFReflector/Log.cpp
@@ -40,6 +40,7 @@ static FILE* m_fpLog = NULL;
 static unsigned int m_displayLevel = 2U;
 
 static struct tm m_tm;
+static bool m_utc = true;
 
 static char LEVELS[] = " DMIWEF";
 
@@ -51,7 +52,13 @@ static bool LogOpen()
 	time_t now;
 	::time(&now);
 
-	struct tm* tm = ::gmtime(&now);
+	struct tm* tm;
+	if(m_utc)
+	{
+		tm = ::gmtime(&now);
+	}else{
+		tm = ::localtime(&now);
+	}
 
 	if (tm->tm_mday == m_tm.tm_mday && tm->tm_mon == m_tm.tm_mon && tm->tm_year == m_tm.tm_year) {
 		if (m_fpLog != NULL)
@@ -75,11 +82,17 @@ static bool LogOpen()
 }
 
 bool LogInitialise(const std::string& filePath, const std::string& fileRoot, unsigned int fileLevel, unsigned int displayLevel)
+{
+	return LogInitialise(filePath,fileRoot,fileLevel,displayLevel,false);
+}
+
+bool LogInitialise(const std::string& filePath, const std::string& fileRoot, unsigned int fileLevel, unsigned int displayLevel, bool utc)
 {
 	m_filePath     = filePath;
 	m_fileRoot     = fileRoot;
 	m_fileLevel    = fileLevel;
 	m_displayLevel = displayLevel;
+	m_utc          = utc;
     return ::LogOpen();
 }
 
@@ -92,8 +105,12 @@ void LogFinalise()
 void Log(unsigned int level, const char* fmt, ...)
 {
     assert(fmt != NULL);
-
-	char buffer[300U];
+	// don't log if log level is disabled
+	if ((level < m_fileLevel || m_fileLevel == 0) && (level < m_displayLevel || m_displayLevel == 0))
+	{
+		return;
+	}
+	char buffer[512U];
 #if defined(_WIN32) || defined(_WIN64)
 	SYSTEMTIME st;
 	::GetSystemTime(&st);
@@ -103,15 +120,26 @@ void Log(unsigned int level, const char* fmt, ...)
 	struct timeval now;
 	::gettimeofday(&now, NULL);
 
-	struct tm* tm = ::gmtime(&now.tv_sec);
+	struct tm* tm;
+	if(m_utc)
+	{
+		tm = ::gmtime(&now.tv_sec);
+	}else{
+		tm = ::localtime(&now.tv_sec);
+	}
 
-	::sprintf(buffer, "%c: %04d-%02d-%02d %02d:%02d:%02d.%03lu ", LEVELS[level], tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec, now.tv_usec / 1000U);
+	unsigned int len;
+#ifdef __APPLE__
+	len = ::snprintf(buffer, 512, "%c: %04d-%02d-%02d %02d:%02d:%02d.%03u ", LEVELS[level], tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec, now.tv_usec / 1000U);
+#else
+	len = ::snprintf(buffer, 512, "%c: %04d-%02d-%02d %02d:%02d:%02d.%03lu ", LEVELS[level], tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec, now.tv_usec / 1000U);
+#endif
 #endif
 
 	va_list vl;
 	va_start(vl, fmt);
 
-	::vsprintf(buffer + ::strlen(buffer), fmt, vl);
+	::vsnprintf(buffer + len, 512 - len, fmt, vl);
 
 	va_end(vl);
 
diff --git a/YSFReflector/Log.h b/YSFReflector/Log.h
index d671ef9..a58f4ee 100644
--- a/YSFReflector/Log.h
+++ b/YSFReflector/Log.h
@@ -29,8 +29,8 @@
 #define	LogFatal(fmt, ...)	Log(6U, fmt, ##__VA_ARGS__)
 
 extern void Log(unsigned int level, const char* fmt, ...);
-
 extern bool LogInitialise(const std::string& filePath, const std::string& fileRoot, unsigned int fileLevel, unsigned int displayLevel);
+extern bool LogInitialise(const std::string& filePath, const std::string& fileRoot, unsigned int fileLevel, unsigned int displayLevel, bool utc);
 extern void LogFinalise();
 
 #endif
